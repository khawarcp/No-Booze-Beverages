
 function geoFindMe() {
  if (!navigator.geolocation){
   console.log("Geolocation is not supported by your browser");
    return;
  }  
  function success(position) {
    var latitude  = position.coords.latitude;
    var longitude = position.coords.longitude;       
    displayLocation(latitude, longitude)    
  }
  function error() {
    console.log("Unable to retrieve your location");
  }
  navigator.geolocation.getCurrentPosition(success, error);
}

function displayLocation(latitude,longitude){
        var request = new XMLHttpRequest();

        //gettings the cookies to to check pop for only one time
        let modalshowlat = localStorage.getItem('modalshowlat');        
        if (modalshowlat === null) {          
          $("#location-modal").modal('show');
          $("#location-modal").modal({ backdrop: "static ", keyboard: false });
        }

        // lat 36.7783 lang -119.4179
        var method = 'GET';
        var url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=36.7783,-119.4179&key=AIzaSyD_4I_Q6nztL1PbEYFj-4b6U8bagvNBexU`;
        var async = true;

        request.open(method, url, async);
        request.onreadystatechange = function(){
          if(request.readyState == 4 && request.status == 200){
            var data = JSON.parse(request.responseText);
            var address = data.results[0].address_components;   
            console.log(data.results[0])       ;
            let country = address.find((element) => {
                let elements = Object.keys(element.types).map((key) => element.types[key]);                                
                return elements.includes("country");
            });
            
            let state = address.find((element) => {
                let elements = Object.keys(element.types).map((key) => element.types[key]);                                
                return elements.includes("administrative_area_level_1");
            });

            let county = address.find((element) => {
                let elements = Object.keys(element.types).map((key) => element.types[key]);  
                return elements.includes("administrative_area_level_2");                 
            });
            let city = address.find((element) => {
                let elements = Object.keys(element.types).map((key) => element.types[key]);                                                
                if(elements.includes("administrative_area_level_3")){
                    return elements.includes("administrative_area_level_3");                    
                }else if(elements.includes("locality")){
                    return elements.includes("locality");                    
                }else{
                    return elements.includes("sublocality");
                } 
            });

            console.log("Country: " + country.short_name);
            console.log("State: " + state.short_name);
            console.log("County: " + county.short_name);
            console.log("City: " + city.short_name);

            //if country not US
            if(country.short_name != 'US'){              
              notUSstate();
              document.querySelector('.modal-body').innerHTML = '<p class="countyMessage"> The products are only served in USA</p>';              
            }else if (state.short_name == 'AL' || state.short_name == 'AR' || state.short_name == 'IN' || state.short_name == 'RI' || state.short_name == 'GU' || state.short_name == 'IA'){
              notUSstate();
              document.querySelector('.modal-body').innerHTML = '<p class="countyMessage"> We don not sell products in your state</p>';              
            }

            //settings the attribute in the pop on matched state
            document.querySelectorAll('#country-state option').forEach((stateValue) => {                                
              stateValue.removeAttribute('selected')
              if(stateValue.value == state.short_name){                                
                stateValue.setAttribute('selected', 'selected') ;
                stateChecker(stateValue.value);               
              }                
            })                  

            // hiding the button if following conditions met
            if( state.short_name == 'AL' || state.short_name == 'AR' || state.short_name == 'IN' || state.short_name == 'RI' || state.short_name == 'GU' || state.short_name == 'IA'){
                hideAllAddButtons();
            }else if( city.short_name == 'San Diego' || city.short_name == 'Denver' || city.short_name == 'Jerseyville'){
                hideAllAddButtons();     
              }else if( county.short_name == 'Sarasota' || county.short_name == 'Union'){
                hideAllAddButtons();           
            } else{
                    console.log('Welcome to the store!')
            }  

        }
        };
        request.send();
      };
      
      var successCallback = function(position){
        var x = position.coords.latitude;
        var y = position.coords.longitude;  
        displayLocation(x,y);
      };

      var errorCallback = function(error){
        var errorMessage = 'Unknown error';
        switch(error.code) {
          case 1:
            errorMessage = 'Permission denied';
            break;
          case 2:
            errorMessage = 'Position unavailable';
            break;
          case 3:
            errorMessage = 'Timeout';
            break;
        }
        document.write(errorMessage);
      };

      var options = {
        enableHighAccuracy: true,
        timeout: 1000,
        maximumAge: 0
      };

      navigator.geolocation.getCurrentPosition(successCallback,errorCallback,options);
 
 // getting the value of state dropdown on change
document.getElementById('country-state').onchange = () => {
        let changedVal = document.getElementById('country-state').value;  
        stateChecker(changedVal);
}

// redirecting the the website if customer hit exit button
document.querySelector('.exit-site').addEventListener('click', () => {
    window.location.href = 'https://www.google.com/';
})      

//checking the state for verify the age 
let stateChecker = (state) =>{
    if(state == 'OR' || state == 'TN'){
        document.querySelector('[for="age"]').innerHTML = `I'm 21+ years old`;
        document.getElementById('age').value = '21+';
    }else{
          document.querySelector('[for="age"]').innerHTML = `I'm 18+ years old`;
          document.getElementById('age').value = '18+';
      }
}

// verifing the age when customer click enter button
document.getElementById('enter-site').onclick = function(e){
    e.preventDefault();
    document.getElementById('age-err').innerHTML = '';        
    let ageInput = document.getElementById('age');    
    if(ageInput.checked == true){        
        $("#location-modal").modal('hide');        
        localStorage.setItem('modalshowlat', 'showed'); 
    }else{        
        document.getElementById('age-err').innerHTML = 'Please verify the age';        
    }    
}

//not us state
let notUSstate = () => {
  document.querySelector('.enter-site').setAttribute('disabled', 'disabled');
  document.querySelector('#country-state').setAttribute('disabled', 'disabled');
  document.querySelector('.modal-body').classList.add('notus');
}

// function to hide all the buttons
let hideAllAddButtons = () => {
    document.querySelectorAll('.quick-add').forEach((items) => {
        items.style.display = 'none';
    })
    document.querySelectorAll('[name="checkout"]').forEach((items) => {
        items.style.display = 'none';
    })
    document.querySelectorAll('.product-form__buttons').forEach((items) => {
        items.style.display = 'none';
    })
}

      